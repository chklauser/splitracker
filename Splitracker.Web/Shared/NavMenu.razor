@using Microsoft.AspNetCore.Hosting
@using Splitracker.Domain
@inject FlagContextHolder holder
@inject IWebHostEnvironment hostEnvironment
@inject IGroupRepository groupRepository
@inject IDialogService dialog

<MudStack>
    <MudNavMenu>
        <MudNavLink
            Href="/"
            Match="NavLinkMatch.All"
            Icon="@Icons.Material.Filled.EmojiPeople">
            Charaktere
        </MudNavLink>
        <MudNavLink
            Href="/Tags"
            Match="NavLinkMatch.All"
            Icon="@Icons.Material.Filled.Tag">
            Tags
        </MudNavLink>
        @if (!stageMode && (experimental || groups is {Count: > 0 }))
        {
            <MudNavGroup
                Title="Gruppen"
                Icon="@Icons.Material.Filled.People"
                @bind-Expanded="groupsExpanded">
                @if (groups != null)
                {
                    foreach (var info in groups)
                    {
                        <MudNavLink
                            Match="NavLinkMatch.All"
                            Href="@info.Url">
                            @info.Name
                        </MudNavLink>
                    }
                }
                @if (experimental)
                {
                    <MudNavLink
                        Icon="@Icons.Material.Filled.GroupAdd"
                        Disabled="@true">
                        Neue Gruppe
                    </MudNavLink>
                }
            </MudNavGroup>
        }
        @if (!stageMode && groups != null && groups.Any(g => g.HasTimeline))
        {
            <MudNavGroup
                Title="Tickleisten"
                Icon="@Icons.Material.Filled.LinearScale"
                @bind-Expanded="timelinesExpanded"
                Disabled="@(groups == null || groups.All(g => !g.HasTimeline))">
                @if (groups != null)
                {
                    foreach (var info in groups.Where(g => g.HasTimeline))
                    {
                        <MudNavLink
                            Match="NavLinkMatch.Prefix"
                            Href="@(info.Url + "/Ticks")">
                            @info.Name
                        </MudNavLink>
                    }
                }
            </MudNavGroup>
        }
        @if (experimental)
        {
            <MudNavLink
                Href="/Roll"
                Match="NavLinkMatch.All"
                Icon="@Icons.Material.Filled.Casino">
                Würfeln
            </MudNavLink>
        }
    </MudNavMenu>
    @if (groups != null && groups.Any(g => g.HasTimeline))
    {
        <MudTooltip Placement="@Placement.Right" Arrow="@true">
            <TooltipContent>
                (Für Spielleiter) Im Präsentationsmodus zeigt/erlaubt dieses Gerät nur, was Spieler*innen auch sehen/machen dürfen.
            </TooltipContent>
            <ChildContent>
            <MudSwitch
                @bind-Checked:get="stageMode"
                @bind-Checked:set="setStageMode"
                class="ml-2">
                Präsentation
            </MudSwitch></ChildContent>
        </MudTooltip>
    }
    <MudSwitch
        @bind-Checked="experimental"
        class="ml-2">
        Experimente
    </MudSwitch>
</MudStack>

@code {

    [CascadingParameter]
    public required FlagContext? Flags { get; set; }

    [CascadingParameter]
    public required Task<AuthenticationState> AuthenticationState { get; set; }

    IReadOnlyList<GroupInfo>? groups;

    bool groupsExpanded;
    bool timelinesExpanded;

    bool experimental
    {
        get => Flags?.Experimental ?? false;
        set => holder.Context = holder.Context with { Experimental = value };
    }

    bool stageMode
    {
        get => Flags?.StageMode ?? false;
        set => holder.Context = holder.Context with { StageMode = value };
    }

    async Task setStageMode(bool newMode)
    {
        if (stageMode == newMode)
        {
            return;
        }

        if (stageMode && !newMode)
        {
            if (await dialog.ShowMessageBox(title: "Präsentationsmodus verlassen?",
                message: "Bist du sicher, dass du den Präsentationsmodus verlassen willst? Wenn Spieler noch auf diesen Bildschirm sehen können, könnten sie Charaktere oder Gruppen sehen, die nicht für ihre Augen bestimmt sind.",
                cancelText: "Abbrechen",
                yesText: "Ja, Präsentationsmodus verlassen", 
                options: new() { CloseOnEscapeKey = true }) is true)
            {
                stageMode = newMode;
            }
        }
        else
        {
            stageMode = newMode;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        var auth = await AuthenticationState;
        groups = await groupRepository.ListGroupsAsync(auth.User);
        groupsExpanded = groups is {Count: < 7 };
        timelinesExpanded = groups?.Count(g => g.HasTimeline) is < 7;
    }

}