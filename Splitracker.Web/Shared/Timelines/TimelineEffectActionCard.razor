@using Splitracker.Domain
@using Splitracker.Domain.Commands
<MudCard
    Elevation="0">
    <MudCardHeader>
        <CardHeaderAvatar>
            <MudIconButton
                Color="Color.Primary"
                Icon="@Icons.Material.Filled.CrisisAlert"
                OnClick="OnCloseButtonClicked"/>
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText
                Typo="@Typo.h6">
                @Tick.Effect.Description
            </MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        @if (!IsHappeningNow)
        {
            <MudText>
                (Effekt wird entfernt)
            </MudText>
        }
    </MudCardContent>
    <MudCardActions>
        <MudButton
            Variant="Variant.Filled"
            Color="@(IsHappeningNow ? Color.Primary : Color.Warning)"
            OnClick="removeEventButtonClicked">
            @if (IsHappeningNow)
            {
                <text>Ist abgehandelt!</text>
            }
            else
            {
                <text>Entfernen!</text>
            }
        </MudButton>
    </MudCardActions>
</MudCard>

@code {

    [Parameter]
    [EditorRequired]
    public required Tick.EffectTick Tick { get; set; }

    [Parameter]
    [EditorRequired]
    public required bool IsHappeningNow { get; set; }

    [CascadingParameter]
    public required ITimelineDispatcher Dispatcher { get; set; }

    [Parameter]
    public EventCallback OnCloseButtonClicked { get; set; }

    async Task removeEventButtonClicked()
    {
        if (IsHappeningNow && Tick is Tick.EffectTicks)
        {
    // Remove just this tick instance
            await Dispatcher.ApplyCommandAsync(new TimelineCommand.RemoveEffectTick(null!, Tick.Effect.Id, Tick.At));
        }
        else
        {
    // Remove the entire effect (with all its tick instances)
            await Dispatcher.ApplyCommandAsync(new TimelineCommand.RemoveEffect(null!, Tick.Effect.Id));
        }
    }

}