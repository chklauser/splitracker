@using Splitracker.Domain

<div
    class="timeline-character-action-card">
    <MudFocusTrap
        DefaultFocus="DefaultFocus.None">
        <MudCard
            Elevation="0">
            <MudCardHeader
                Class="pb-0">
                <CardHeaderAvatar>
                    <CharacterAvatar
                        ShowPenalty="@true"
                        Character="@Tick.Character"
                        Selected="@canInteract"
                        OnClick="@OnCloseButtonClicked"/>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText
                        Typo="@Typo.h6">
                        @Tick.Character.Name
                    </MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    @if (canInteract)
                    {
                        <MudIconButton
                            tabindex="10"
                            Disabled="@(SelectedActionTemplate == null || ActionData.NumberOfTicks <= 0)"
                            Size="Size.Large"
                            Color="@Color.Success"
                            Icon="@Icons.Material.Filled.CheckCircle"
                            OnClick="applyActionClicked"/>
                    }
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent
                Class="@(canInteract ? "pb-0" : "")">
                <MudText>
                    @if (IsReadyNow)
                    {
                        <text>ist bereit für die nächste Aktion.</text>
                    }
                    else if (CanReact)
                    {
                        <text>könnte reagieren.</text>
                    }
                    else
                    {
                        <text>muss sich erst wieder Überblick verschaffen.</text>
                    }
                </MudText>
                @if (canInteract)
                {
                    <MudStack
                        Row="true"
                        Class="align-center justify-space-between">
                        <MudSlider
                            T="int"
                            Min="@minNumberOfTicks(SelectedActionTemplate)"
                            Max="@(Math.Min(maxNumberOfTicks(SelectedActionTemplate), 20))"
                            @bind-Value:get="numberOfTicks"
                            @bind-Value:set="changeNumberOfTicks"
                            TickMarks="@(Math.Abs(Math.Min(maxNumberOfTicks(SelectedActionTemplate), 20) - minNumberOfTicks(SelectedActionTemplate)) < 10)"
                            Disabled="@(!hasTicksParameter)"
                            Size="Size.Large">
                        </MudSlider>
                        <MudNumericField
                            tabindex="0"
                            T="int"
                            Variant="@Variant.Outlined"
                            @ref="numberOfTicksField"
                            @bind-Value:get="numberOfTicks"
                            @bind-Value:set="changeNumberOfTicks"
                            Min="@minNumberOfTicks(SelectedActionTemplate)"
                            Max="@maxNumberOfTicks(SelectedActionTemplate)"
                            Style="width: 100px"
                            DebounceInterval="300"
                            Disabled="@(!hasTicksParameter)"
                            HelperText="@(SelectedActionTemplate is { Multiplier: not 1 and var multiplier } ? $"×{multiplier} Ticks" : "Ticks")"/>
                    </MudStack>
                    <MudTextField
                        tabindex="1"
                        Variant="@Variant.Outlined"
                        @bind-Value:get="ActionData.Description"
                        @bind-Value:set="descriptionChanged"
                        Immediate="@false"
                        Disabled="@(ActionData.Template is null or { Type: not ActionTemplateType.Continuous })"
                        HelperText="Beschreibung der kontinuierlichen Aktion"
                        HelperTextOnFocus="false"
                        Clearable="@true"/>
                }
            </MudCardContent>
            @if (canInteract)
            {
                <MudCardActions
                    Class="pb-3">
                    <CascadingValue
                        IsFixed="@true"
                        Value="@this">
                        @if (ActionData.NumberOfTicks > 0)
                        {
                            if (!IsReadyNow)
                            {
                                <TimelineActionButton
                                    Action="@CommonActionTemplates.Reaction"/>
                                <TimelineActionButton
                                    Action="@CommonActionTemplates.ActiveDefense"/>
                                @if (Tick is Tick.ActionEnds)
                                {
                                    <TimelineActionButton
                                        Action="@CommonActionTemplates.AbortContinuousAction"/>
                                }
                            }
                            <TimelineActionButton
                                Action="@CommonActionTemplates.Ready"/>
                            <TimelineActionButton
                                Action="@CommonActionTemplates.Continuous"/>
                            <TimelineActionButton
                                Action="@CommonActionTemplates.Immediate"/>
                            if (IsReadyNow)
                            {
                                <TimelineActionButton
                                    Action="@CommonActionTemplates.Move"/>
                                <TimelineActionButton
                                    Action="@CommonActionTemplates.Sprint"/>
                                var meleeShorthands = Tick.Character.ActionShorthands.Values
                                    .Where(x => x.Type == ActionShorthandType.Melee)
                                    .OrderBy(x => x.Name)
                                    .ToList();
                                if (meleeShorthands.Count > 0)
                                {
                                    foreach (var shorthand in meleeShorthands)
                                    {
                                        <TimelineActionButton @key="shorthand.Id" Action="@shorthand.ToTemplate()" />
                                    }
                                    <TimelineActionButton
                                        Action="@CommonActionTemplates.LookForGap"/>
                                }
                                var rangedShorthands = Tick.Character.ActionShorthands.Values
                                    .Where(x => x.Type == ActionShorthandType.Ranged)
                                    .OrderBy(x => x.Name)
                                    .ToList();
                                if(rangedShorthands.Count > 0)
                                {
                                    foreach (var shorthand in rangedShorthands)
                                    {
                                        <TimelineActionButton @key="shorthand.Id" Action="@shorthand.ToTemplate()" />
                                    }
                                    <TimelineActionButton
                                        Action="@CommonActionTemplates.Aim"/>
                                    <TimelineActionButton
                                        Action="@CommonActionTemplates.Shoot"/>
                                }
                                var spellShorthands = Tick.Character.ActionShorthands.Values
                                    .Where(x => x.Type == ActionShorthandType.Spell)
                                    .OrderBy(x => x.Name)
                                    .ToList();
                                if (spellShorthands.Count > 0)
                                {
                                    foreach (var shorthand in spellShorthands)
                                    {
                                        <TimelineActionButton @key="shorthand.Id" Action="@shorthand.ToTemplate()" />
                                    }
                                    <TimelineActionButton
                                        Action="@CommonActionTemplates.CastSpell"/>
                                }
                            }
                            <TimelineActionButton
                                Action="@CommonActionTemplates.LeaveTimeline"/>
                        }
                        else
                        {
                            <TimelineActionButton
                                StartIcon="@Icons.Material.Filled.ArrowCircleUp"
                                Action="@CommonActionTemplates.BumpBackward"
                                OnClick="async b => await applyBump(b, -1)"/>
                            <TimelineActionButton
                                EndIcon="@Icons.Material.Filled.ArrowCircleDown"
                                Action="@CommonActionTemplates.BumpForward"
                                OnClick="async b => await applyBump(b, 1)"/>
                        }
                    </CascadingValue>
                </MudCardActions>
            }
        </MudCard>
    </MudFocusTrap>
</div>