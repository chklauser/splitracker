@using Splitracker.Domain

@code {

}

<div class="timeline-preview @Class">
@if (allocatedTimeline == null)
{
    <MudProgressCircular
        Color="Color.Primary"/>
}
else
{
    <MultiTimeline
        DisableModifiers="@true"
        TimelinePosition="@TimelinePosition.Alternate"
        TimelineAlign="@TimelineAlign.Start"
        Labels="@timelineLabels()"
        @bind-SelectedIndex:get="selectedIndex"
        @bind-SelectedIndex:set="changeSelectedIndex"
        @onclick="timelineClicked">
        @{
            var numTracks = 1;
        }
        @foreach (var lengths in allocatedTimeline.GroupBy(y => y.Track, y => y.Offset + 1))
        {
            var track = lengths.Key;
            numTracks = Math.Max(numTracks, track + 1);
            <MultiTimelineTrack
                @key="@track"
                Index="@track"
                Lengths="@(track == 0 ? new[] { allocatedTimeline.Count } : lengths)"/>
        }
        @foreach (var (tick, track, offset) in allocatedTimeline)
        {
            @if (tick is not Empty)
            {
                <MultiTimelineItem
                    @key="tick.ToString()"
                    Track="@track"
                    Offset="@offset"
                    Size="@Size.Medium"
                    Color="@(offset == selectedIndex ? Color.Primary : Color.Default)">
                    <ItemDot>
                        @if (tick is Tick.CharacterTick { Character: var c})
                        {
                            <CharacterAvatar
                                Elevation="4"
                                Character="@c"
                                Selected="@(offset == selectedIndex)"
                                ShowPenalty="@true"/>
                        }
                        else if (tick is Tick.EffectTick)
                        {
                            <MudIcon
                                Color="@(offset == selectedIndex ? Color.Default : Color.Dark)"
                                Icon="@Icons.Material.Filled.CrisisAlert"/>
                        }
                    </ItemDot>
                    <ItemContent>
                        <MudHidden
                            Breakpoint="@PersistentActionPanelBreakpoint"
                            Invert="@true">
                            <MudPopover
                                AnchorOrigin="@Origin.TopCenter"
                                TransformOrigin="@Origin.BottomCenter"
                                OverflowBehavior="OverflowBehavior.FlipOnOpen"
                                Open="@(actionCardOpen && selectedIndex == offset)">
                                @* NOTE: the action cards are _almost_ duplicated below for the wide screen layout.
                                 If you make changes here, also adjust the wide screen version.*@
                                @if (tick is Tick.CharacterTick ct)
                                {
                                    <TimelineCharacterActionCard
                                        Tick="ct"
                                        Permissions="@Permissions[ct.Character.Id]"
                                        IsReadyNow="@characterIsReadyNow(offset)"
                                        CanReact="@characterCanReact(offset)"
                                        @bind-ActionData:get="getCharacterActionData(ct.Character)"
                                        @bind-ActionData:set="data => storeCharacterActionData(ct.Character, data)"
                                        OnApplyActionClicked="d => characterActionApplyClicked(d, ct.Character)"
                                        OnCloseButtonClicked="() => actionCardOpen = false"/>
                                }
                                else if (tick is Tick.EffectTick et)
                                {
                                    @* Tepeat CascadingValue _inside_ the popover for complicated Blazor reasons *@
                                    <CascadingValue
                                        TValue="ITimelineDispatcher"
                                        Value="@Dispatcher"
                                        IsFixed="@true">
                                        <TimelineEffectActionCard
                                            Tick="et"
                                            IsHappeningNow="@effectIsHappeningNow(offset)"
                                            OnCloseButtonClicked="() => actionCardOpen = false"/>
                                    </CascadingValue>
                                }
                            </MudPopover>
                        </MudHidden>
                        <TickSummary
                            Tick="@tick"/>
                    </ItemContent>
                </MultiTimelineItem>
            }
            else
            {
                <MultiTimelineItem
                    @key="@($"synth-tick:{tick.At}")"
                    Track="@track"
                    Offset="@offset"
                    Size="@Size.Small"
                    Variant="Variant.Outlined"
                    Color="@(offset == selectedIndex ? Color.Primary : Color.Default)"/>
            }
        }
        <CascadingValue
            TValue="ITimelineDispatcher"
            Value="@Dispatcher"
            IsFixed="@true">
            <MudHidden
                Breakpoint="@PersistentActionPanelBreakpoint">
                @if (selectedIndex >= 0 && selectedIndex < allocatedTimeline.Count
                    && allocatedTimeline[selectedIndex] is (var tick and not Empty, var track, var offset))
                {
                    <div 
                        @key="offset" 
                        style="position: relative; @(MultiTimelineItem.ComputeGridPosition(numTracks - 1 + MultiTimelineItem.SpanColumns, offset, 10, 1))">
                <MudPaper
                    Elevation="2"
                    Style="position: absolute; top: 0; left: 0; right: 0">
                    @* NOTE: the action cards are _almost_ duplicated above for the mobile screen layout.
                    If you make changes here, also adjust the mobile screen version.*@
                    @if (tick is Tick.CharacterTick ct)
                    {
                        <TimelineCharacterActionCard
                            Tick="ct"
                            Permissions="@Permissions[ct.Character.Id]"
                            IsReadyNow="@characterIsReadyNow(offset)"
                            CanReact="@characterCanReact(offset)"
                            @bind-ActionData:get="getCharacterActionData(ct.Character)"
                            @bind-ActionData:set="data => storeCharacterActionData(ct.Character, data)"
                            OnApplyActionClicked="d => characterActionApplyClicked(d, ct.Character)"/>
                    }
                    else if (tick is Tick.EffectTick et)
                    {
                        <TimelineEffectActionCard
                            Tick="et"
                            IsHappeningNow="@effectIsHappeningNow(offset)"/>
                    }
                </MudPaper>
                </div>
                }
            </MudHidden>
        </CascadingValue>
    </MultiTimeline>
}
</div>