@using Splitracker.Domain

@if (allocatedTimeline == null)
{
    <MudProgressCircular Color="Color.Primary"/>
}
else
{
    <MultiTimeline
        DisableModifiers="@true"
        TimelinePosition="@TimelinePosition.Alternate"
        TimelineAlign="@TimelineAlign.Start"
        Labels="@timelineLabels()"
        @bind-SelectedIndex:get="selectedIndex"
        @bind-SelectedIndex:set="changeSelectedIndex"
        @onclick="timelineClicked">
        @foreach (var (track, lastOffset) in allocatedTimeline.GroupBy(y => y.Track).Select(track => (track.Key, track.Max(t => t.Offset))))
        {
            <MultiTimelineTrack
                @key="@track"
                Index="@track"
                Length="@(track == 0 ? allocatedTimeline.Count : lastOffset + 1)"/>
        }
        @foreach (var (tick, track, offset) in allocatedTimeline)
        {
            @if (tick is not Empty)
            {
                <MultiTimelineItem
                    @key="tick.ToString()"
                    Track="@track"
                    Offset="@offset"
                    Size="@Size.Medium"
                    Color="@(offset == selectedIndex ? Color.Primary : Color.Default)">
                    <ItemDot>
                        @if (tick is Tick.CharacterTick { Character: var c})
                        {
                            <CharacterAvatar Character="@c" IsSelected="@(offset == selectedIndex)" />
                        }
                        else if (tick is Tick.EffectTick)
                        {
                            <MudIcon
                                Color="@(offset == selectedIndex ? Color.Default : Color.Dark)"
                                Icon="@Icons.Material.Filled.CrisisAlert"/>
                        }
                    </ItemDot>
                    <ItemContent>
                        <MudPopover AnchorOrigin="@Origin.TopCenter" TransformOrigin="@Origin.BottomCenter"
                                    OverflowBehavior="OverflowBehavior.FlipOnOpen" Open="@(actionCardOpen && selectedIndex == offset)">
                            @if (tick is Tick.CharacterTick ct)
                            {
                                <TimelineCharacterActionCard 
                                    Tick="ct" 
                                    IsReadyNow="@(offset == 0)"
                                    CanReact="@(offset - allocatedTimeline[0].Tick.At < 30)"
                                    @bind-ActionData:get="getCharacterActionData(ct.Character)"
                                    @bind-ActionData:set="data => storeCharacterActionData(ct.Character, data)"
                                    />
                            }
                            else if (tick is Tick.EffectTick et)
                            {
                                <TimelineEffectActionCard Tick="et" IsHappeningNow="@(offset == 0)" />
                            }
                        </MudPopover>
                        <TickSummary
                            Tick="@tick"/>
                    </ItemContent>
                </MultiTimelineItem>
            }
            else
            {
                <MultiTimelineItem
                    @key="@($"synth-tick:{tick.At}")"
                    Track="@track"
                    Offset="@offset"
                    Size="@Size.Small"
                    Variant="Variant.Outlined"
                    Color="@(offset == selectedIndex ? Color.Primary : Color.Default)"/>
            }
        }
    </MultiTimeline>
}