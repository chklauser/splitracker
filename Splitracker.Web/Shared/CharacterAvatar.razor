@using Splitracker.Domain
@using MudBlazor.Utilities

@{
    var penalty = Character.Penalty;
}
<div
    class="flex-none character-avatar" style="@colorVariables()" 
        @onclick="avatarClicked">
    <MudBadge
        Visible="@(ShowPenalty && penalty > 0)"
        Overlap="@true"
        Origin="@Origin.BottomCenter"
        Bordered="true"
        Color="Color.Error"
        Content="@($"-{Character.Penalty}")">
        <MudTooltip
            Text="@Character.Name">
            <MudAvatar
                Class="@(Character.CustomColor != null ? "custom-avatar-colors" : "")"
                Elevation="@Elevation"
                Color="@(Disabled ? Color.Default : Selected ? Color.Primary : Color.Dark)">
                @string.Join("", Character.Name.ToCharArray().Where(ch => char.IsUpper(ch) || char.IsDigit(ch)).Take(2))
            </MudAvatar>
        </MudTooltip>
    </MudBadge>
</div>

@code {

    [Parameter]
    [EditorRequired]
    public required Character Character { get; set; }

    [Parameter]
    public bool Selected { get; set; }

    [Parameter]
    public EventCallback<Character> OnClick { get; set; }

    [Parameter]
    public bool ShowPenalty { get; set; }

    [Parameter]
    public bool Disabled { get; set; }
    
    [Parameter]
    public int Elevation { get; set; }

    // based on https://stackoverflow.com/questions/1855884/determine-font-color-based-on-background-color
    string contrastColor(string colorRaw)
    {
        var color = new MudColor(colorRaw);

        // Counting the perceptive luminance - human eye favors green color...      
        var luminance = (0.299 * color.R + 0.587 * color.G + 0.114 * color.B) / 255;

        var d = luminance > 0.5
            ? 0 // bright colors - black font
            : 255; // dark colors - white font

        return new MudColor(d, d, d, 255).ToString(MudColorOutputFormats.Hex);
    }

    string colorVariables() => Character switch {
        { CustomColor: {} customColor } when Selected  => 
            $"--character-avatar-fg-color: {customColor}; --character-avatar-bg-color: {contrastColor(customColor)};",
        { CustomColor: {} customColor }  => 
            $"--character-avatar-bg-color: {customColor}; --character-avatar-fg-color: {contrastColor(customColor)};", 
        _ => ""};

    async Task avatarClicked()
    {
        if (!Disabled)
        {
            await OnClick.InvokeAsync(Character);
        }
    }

}