@using System.Collections.Immutable
@using Splitracker.Domain
@using Splitracker.Domain.Commands

@{
    var lost = points.Exhausted + points.Consumed + points.Channeled;
}
<MudTabPanel
    BadgeData="@(ShowPenalties ? $"{(penalty > 0 ? '-' : '±')}{penalty}" : null)"
    BadgeColor="@Color.Error"
    Text="@($"{Title} ({TotalCapacity(baseCapacity) - lost})")"
    Icon="@Icon"
    >
    <MudStack Class="pt-3">
        <div class="mx-auto">
            <PointsBlock
                Points="@points"
                ShowPenalties="@ShowPenalties"
                LineCapacity="@LineCapacity(baseCapacity)"
                TotalCapacity="@TotalCapacity(baseCapacity)"/>
        </div>
        <PointsEditor
            CurrentPoints="@points"
            LineCapacity="@LineCapacity(baseCapacity)"
            TotalCapacity="@TotalCapacity(baseCapacity)"
            Type="@Type"/>
        @foreach (var (channeling, idx) in channelings.Enumerated())
        {
            <StopChanneling
                @key="idx"
                Index="@idx"
                Channeled="@channeling"
                Type="@Type"
                />
        }
        @if (points.Exhausted > 0)
        {
            <ShortRest
                ExhaustedPoints="@points.Exhausted"/>
        }
    </MudStack>
</MudTabPanel>

@code {
    [Parameter]
    [EditorRequired]
    public required string Title { get; set; }

    [Parameter]
    [EditorRequired]
    public required PoolType Type { get; set; }
    
    [Parameter]
    [EditorRequired]
    public required string Icon { get; set; }
    
    [Parameter]
    [EditorRequired]
    public required Pool Pool { get; set; }
    
    int baseCapacity => Pool.BaseCapacity;
    
    PointsVec points => Pool.Points;
    
    [Parameter]
    [EditorRequired]
    public required Func<int, int> LineCapacity { get; set; }
    
    [Parameter]
    [EditorRequired]
    public required Func<int, int> TotalCapacity { get; set; }

    [Parameter]
    public bool ShowPenalties { get; set; }

    IImmutableList<int> channelings => Pool.Channelings;

    int penalty => Character.PenaltyDueToLowLp(points, baseCapacity);

}