@using Splitracker.Domain
@using Splitracker.Domain.Rolls
@using Splitracker.Web.Shared.Rolls

<MudDialog>
    <TitleContent>@Action.Name</TitleContent>
    <DialogContent>
        <MudStack>
            @* Bonus *@
            <MudText
                Typo="Typo.subtitle1">
                Bonus @bonus
            </MudText>
            <MudSlider
                T="int"
                @bind-Value="bonus"
                Max="40"
                Min="0"
                TickMarks="true"
                ValueLabel="true"
                Immediate="@true"
                Size="Size.Large"/>
            @* Roll *@
            <MudText
                Typo="Typo.subtitle1">
                Wurf
            </MudText>
            <MudChipSet
                SelectedValues="@(new object[] { rollType })"
                Filter="true"
                Mandatory="true"
                MultiSelection="false"
                SelectedChipChanged="@(ch => rollType = (RollType)ch.Value)">
                <MudChip
                    Value="RollType.Safe"
                    Color="Color.Success">
                    Sicherheitswurf
                </MudChip>
                <MudChip
                    Value="RollType.Standard"
                    Color="Color.Primary">
                    Standardwurf
                </MudChip>
                <MudChip
                    Value="RollType.Risky"
                    Color="Color.Error">
                    Risikowurf
                </MudChip>
            </MudChipSet>
            <MudButton
                Color="Color.Primary"
                Variant="Variant.Filled"
                OnClick="@rollDice">
                Würfeln
            </MudButton>
            @if (rolled)
            {
                <MudStack
                    Row="true">
                    @if (rollType == RollType.Standard)
                    {
                        <DieDisplay
                            Roll="@rolls[0]"/>
                        <div
                            class="mud-typography mud-typography-h4">
                            &nbsp;+&nbsp;
                        </div>
                        <DieDisplay
                            Roll="@rolls[1]"/>
                    }
                    else if (rollType == RollType.Safe)
                    {
                        var sorted = rolls.Take(2).Order().ToArray();
                        <DieDisplay
                            Roll="@sorted[0]"/>
                        <div
                            class="mud-typography mud-typography-h4">
                            &nbsp;oder&nbsp;
                        </div>
                        <DieDisplay
                            Roll="@sorted[1]"/>
                    }
                    else if (rollType == RollType.Risky)
                    {
                        var sorted = rolls.Count(r => r <= 2) >= 2 ? rolls.OrderDescending().ToArray() : rolls.Order().ToArray();
                        <div
                            class="mud-typography mud-typography-h4">
                            (
                        </div>
                        <DieDisplay
                            Roll="@sorted[0]"/>
                        <div
                            class="mud-typography mud-typography-h4">
                            ,&nbsp;
                        </div>
                        <DieDisplay
                            Roll="@sorted[1]"/>
                        <div
                            class="mud-typography mud-typography-h4">
                            )&nbsp;
                        </div>
                        <DieDisplay
                            Roll="@sorted[2]"/>
                        <div
                            class="mud-typography mud-typography-h4">
                            &nbsp;+&nbsp;
                        </div>
                        <DieDisplay
                            Roll="@sorted[3]"/>
                    }
                    <div
                        class="mud-typography mud-typography-h4">
                        &nbsp;=&nbsp;
                    </div>
                    <MudText
                        Typo="Typo.h4">
                        @dieResult
                    </MudText>
                </MudStack>

                @* Ziel *@
                <MudText
                    Typo="Typo.subtitle1">
                    Zielwert @(target != 0 ? target.ToString() : "")
                </MudText>
                <MudSlider
                    T="int"
                    @bind-Value="target"
                    Immediate="@true"
                    Max="50"
                    Min="0"
                    TickMarks="true"
                    ValueLabel="true"
                    Size="Size.Large"/>
                @if (target > 0)
                {
                    <MudStack
                        Row="true">
                        <MudText
                            Typo="Typo.h4">
                            @(result)
                        </MudText>
                        <div
                            class="mud-typography mud-typography-h4">
                            &nbsp;@(result >= target ? "≥" : "<")&nbsp;
                        </div>
                        <MudText
                            Typo="Typo.h4"
                            Color="Color.Primary">
                            @target
                        </MudText>
                        <div
                            class="mud-typography mud-typography-h4">
                            &nbsp;(
                        </div>
                        <MudText
                            Typo="Typo.h4">
                            @successDegrees EG
                        </MudText>
                        <div
                            class="mud-typography mud-typography-h4">)</div>
                    </MudStack>
                }
            }
            @if (Action.Damage is { } damage)
            {
                <MudText
                    Typo="Typo.subtitle1">
                    Schaden @damage
                    @if (damage.ClampMin > 1)
                    {
                        <text> Scharf @damage.ClampMin</text>
                    }
                    @if (damage.PerCriticalBonus > 0)
                    {
                        <text> Kritisch @damage.PerCriticalBonus</text>
                    }
                    @if (damage.NumberOfBonusDice > 0)
                    {
                        <text> Exakt @damage.NumberOfBonusDice</text>
                    }
                </MudText>
                <MudButton
                    Color="Color.Secondary"
                    Variant="Variant.Filled"
                    OnClick="@rollDamage">
                    Schaden Würfeln
                </MudButton>
            }
            @if (damageRollResult is { } damageRoll)
            {
                <MudStack
                    Row="true">
                    <MudText
                        Typo="Typo.h4">
                        @(damageRoll)
                    </MudText>
                    @if (successDegrees > 0)
                    {
                        <div
                            class="mud-typography mud-typography-h4">
                            &nbsp;+&nbsp;
                        </div>
                        <MudText
                            Typo="Typo.h4"
                            Color="Color.Secondary">
                            @successDegrees
                            @if (Action.PerSuccessDamageBonus > 0)
                            {
                                <text>&nbsp;×&nbsp;@(1 + Action.PerSuccessDamageBonus)</text>
                            }
                        </MudText>
                    }
                    <div
                        class="mud-typography mud-typography-h4">
                        &nbsp;=&nbsp;
                    </div>
                    <MudText
                        Typo="Typo.h4">
                        @(damageRoll + successDegrees * (1 + Action.PerSuccessDamageBonus))
                    </MudText>
                </MudStack>
            }
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton
            tabindex="500"
            Color="Color.Default"
            OnClick="@close">
            Schliessen
        </MudButton>
        @if (Action is { Type: ActionShorthandType.Spell, CostExpression: { } cost })
        {
            <MudButton
                Color="Color.Default"
                OnClick="@(() => raiseCosts(cost))">
                Fokuskosten @cost übernehmen
            </MudButton>
        }
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    public required MudDialogInstance MudDialog { get; set; }
    
    [CascadingParameter]
    public required SessionContext Session { get; set; }

    [Parameter]
    [EditorRequired]
    public required ActionShorthand Action { get; set; }

    bool rolled;
    int bonus;
    RollType rollType = RollType.Standard;
    readonly int[] rolls = new int[4];
    readonly Random random = new();
    int dieResult;
    int result => bonus + dieResult;
    int? damageRollResult;

    int successDegrees =>
        Math.Clamp((result - target) / 3, -5, 5)
        + (dieResult <= 3 ? -3 : 0)
        + (dieResult >= 19 ? +3 : 0);

    int target
    {
        get => Session.RollTarget;
        set => Session.RollTarget = value;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        bonus = Action.Bonus;
        target = Session.RollTarget;
    }

    void close()
    {
        MudDialog.Close(DialogResult.Ok<string?>(null));
    }

    void raiseCosts(string cost)
    {
        MudDialog.Close(DialogResult.Ok<string?>(cost));
    }

    void rollDice()
    {
        for (var i = 0; i < rolls.Length; i++)
        {
            rolls[i] = random.Next(10) + 1;
        }

        dieResult = rollType switch {
            RollType.Standard => rolls.Take(2).Sum(),
            RollType.Risky => (rolls.Count(r => r <= 2) >= 2 ? rolls.Order() : rolls.OrderDescending()).ToArray().Take(2).Sum(),
            RollType.Safe => rolls.Take(2).Max(),
            _ => throw new ArgumentOutOfRangeException(),
        };

        rolled = true;
    }

    void rollDamage()
    {
        if (Action.Damage is { } damage)
        {
            damageRollResult = damage.Roll(random);
        }
        else
        {
            damageRollResult = null;
        }
    }

}