@using Splitracker.Domain
@using System.Collections.Immutable
@inject IDialogService dialogs

@{
    var row = StartRow;
}

@* title *@
<MudText
    Typo="Typo.body1"
    Class="full"
    Style="@($"grid-row: {row++}")">
    <strong>@typeTitle</strong>
</MudText>

@* existing actions *@
<MudChipSet
    Class="full"
    Style="@($"grid-row: {row++}")"
    AllClosable="@true"
    SelectedChip="@null">
    @foreach (var shorthand in Shorthands.Values.Where(s => s.Type == Type).OrderBy(s => s.Name))
    {
        <MudTooltip
            @key="shorthand.Id"
            Text="@shorthand.Description"
            ShowOnClick="@(shorthand.Description != null)"
            ShowOnFocus="@(shorthand.Description != null)"
            ShowOnHover="@(shorthand.Description != null)">
            <MudChip
                OnClick="@(_ => editFlow(shorthand))"
                OnClose="@(_ => removeShorthand(shorthand))">
                @shorthand.Name
                @if (shorthand.CostExpression == null)
                {
                    <text> (@shorthand.Ticks)</text>
                }
                else if (shorthand.Ticks == 1)
                {
                    <text> (1 Tick, @shorthand.CostExpression)</text>
                }
                else
                {
                    <text> (@shorthand.Ticks Ticks, @shorthand.CostExpression)</text>
                }
            </MudChip>
        </MudTooltip>
    }
</MudChipSet>

@* add action *@
<div
    class="default-control"
    style="@($"grid-row: {row++}")">
    <MudButton
        Icon="@Icons.Material.Filled.Add"
        Color="Color.Success"
        OnClick="@addShorthand">
        @typeObject hinzufügen
    </MudButton>
</div>

@{
    _ = row;
}

@code {

    [Parameter]
    [EditorRequired]
    public required ActionShorthandType Type { get; set; }

    [Parameter]
    public required IImmutableDictionary<string, ActionShorthand> Shorthands { get; set; }
        = ImmutableDictionary<string, ActionShorthand>.Empty;

    [Parameter]
    public EventCallback<IImmutableDictionary<string, ActionShorthand>> ShorthandsChanged { get; set; }

    [Parameter]
    [EditorRequired]
    public required int StartRow { get; set; }

    string typeTitle => Type switch{
        ActionShorthandType.Melee => "Nahkampf",
        ActionShorthandType.Ranged => "Fernkampf",
        ActionShorthandType.Spell => "Zauber",
        _ => throw new ArgumentOutOfRangeException(nameof(Type)),
        };

    string typeObject => Type switch{
        ActionShorthandType.Melee => "Nahkampfangriff",
        ActionShorthandType.Ranged => "Fernkampfangriff",
        ActionShorthandType.Spell => "Zauber",
        _ => throw new ArgumentOutOfRangeException(nameof(Type)),
        };

    Task addShorthand() => editFlow(null);

    async Task editFlow(ActionShorthand? existingShorthand)
    {
        var parameters = new DialogParameters<ActionShorthandDialog> {
            {x => x.Type, Type},
            {x => x.Shorthand, existingShorthand},
        };
        var dialog = await dialogs.ShowAsync<ActionShorthandDialog>(string.Empty, parameters);
        var result = await dialog.Result;

        if (result is { Canceled: false, Data: ActionShorthand newShorthand})
        {
            await ShorthandsChanged.InvokeAsync(Shorthands.SetItem(newShorthand.Id, newShorthand));
        }
    }

    async Task removeShorthand(ActionShorthand shorthand)
    {
        await ShorthandsChanged.InvokeAsync(Shorthands.Remove(shorthand.Id));
    }

}