@using Splitracker.Domain
@using Splitracker.Domain.Commands
@using System.Diagnostics.CodeAnalysis
@using System.Collections.Immutable
@using MudBlazor.Utilities

@implements IDisposable
@implements ICharacterCommandRouter
@inject ICharacterRepository repository

@if (EditMode && Permissions.HasFlag(CharacterPermissions.EditStats) 
    || !EditMode && Permissions.HasFlag(CharacterPermissions.ViewStats))
{
    <CascadingValue
        TValue="ICharacterCommandRouter"
        IsFixed="true"
        Value="@this">
        <MudCard
            Class="@($"CharacterCard {(EditMode ? "edit-mode" : "")}")">
            <MudCardHeader
                Class="pb-0">
                <CardHeaderAvatar>
                    <CharacterAvatar
                        Elevation="2"
                        Character="@character"/>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    @if (EditMode)
                    {
                        <MudTextField
                            @bind-Value="newName"
                            Label="Name"
                            Required
                            Immediate="@true"
                            RequiredError="Jeder braucht einen Namen!"/>
                    }
                    else
                    {
                        <MudText
                            Typo="Typo.h4">
                            @character.Name
                        </MudText>
                    }
                </CardHeaderContent>
                <CardHeaderActions>
                    @if (EditMode)
                    {
                        <MudIconButton
                            Icon="@Icons.Material.Filled.Delete"
                            Color="Color.Secondary"
                            @onclick="deleteAsync"/>
                    }
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent
                Class="pt-0">
                @if (EditMode)
                {
                    var row = 1;
                    <div
                        class="editor">
                        @* LP *@
                        <div
                            class="default-control"
                            style="@($"grid-row: {row}")">
                            <MudNumericField
                                Label="LP"
                                @bind-Value="newLpBaseCapacity"
                                Min="1"
                                Max="20"
                                Required/>
                        </div>
                        <MudText
                            Class="outcome"
                            Style="@($"grid-row: {row++}")">
                            =&nbsp;@(newLpBaseCapacity * 5)
                        </MudText>
                        @* FO *@

                        <div
                            class="default-control"
                            style="@($"grid-row: {row++}")">
                            <MudNumericField
                                Label="FO"
                                @bind-Value="newFoBaseCapacity"
                                Min="1"
                                Max="@(12 * 5)"
                                Required/>
                        </div>

                        @* Color *@

                        <MudCheckBox
                            Style="@($"grid-row: {row}; grid-column: 1")"
                            T="bool"
                            @bind-Checked="newHasCustomColor"/>
                        <div
                            style="@($"grid-row: {row}; grid-column: 2/4")"
                            @onclick="() => { if (!newHasCustomColor) newHasCustomColor = true; }">
                            <MudColorPicker
                                Disabled="@(!newHasCustomColor)"
                                Label="Avatar Farbe"
                                @bind-Value="newColor"
                                DisableAlpha="@true"
                                PickerVariant="PickerVariant.Inline"
                                ColorPickerMode="ColorPickerMode.RGB"/>
                        </div>
                        <div
                            class="outcome"
                            style="grid-row: @(row++)">
                            <CharacterAvatar
                                Elevation="2"
                                Selected="@dummyAvatarPreviewSelected"
                                OnClick="() => dummyAvatarPreviewSelected = !dummyAvatarPreviewSelected"
                                Character="@(character with { CustomColor = newHasCustomColor ? newColor?.ToString(MudColorOutputFormats.Hex) : null })"/>
                        </div>

                        @* Actions *@
                        <ActionShorthandListEditor
                            @bind-Shorthands="newShorthands"
                            StartRow="@(row)"
                            Type="ActionShorthandType.Melee"/>
                        @{ row += 3; }
                        <ActionShorthandListEditor
                            @bind-Shorthands="newShorthands"
                            StartRow="@(row)"
                            Type="ActionShorthandType.Ranged"/>
                        @{ row += 4; }
                        <ActionShorthandListEditor
                            @bind-Shorthands="newShorthands"
                            StartRow="@(row)"
                            Type="ActionShorthandType.Spell"/>
                        @{ row += 4; }
                        @* Opponent *@
                        <div
                            style="@($"grid-row: {row}")"
                            class="default-control">
                            <MudTooltip
                                Text="(Für Spielleiter)">
                                <MudSwitch
                                    T="bool"
                                    UnCheckedColor="Color.Default"
                                    Color="Color.Error"
                                    @bind-Checked="newIsOpponent"
                                    Label="Ist Gegner*in"/>
                            </MudTooltip>
                        </div>
                    </div>
                }
                else
                {
                    <MudTabs
                        KeepPanelsAlive="true"
                        TabPanelClass="CharacterTab">
                        <PoolEditor
                            Title="Leben"
                            Icon="@Icons.Material.Filled.Shield"
                            TotalCapacity="@(c => c * 5)"
                            LineCapacity="@(c => c)"
                            Pool="@character.Lp"
                            ShowPenalties
                            Type="@PoolType.Lp"
                            Permissions="@Permissions"/>
                        <PoolEditor
                            Title="Fokus"
                            Icon="@Icons.Material.Filled.Nightlight"
                            TotalCapacity="@(c => c)"
                            LineCapacity="@(_ => 12)"
                            Pool="@character.Fo"
                            Type="@PoolType.Fo"
                            Permissions="@Permissions"/>
                    </MudTabs>
                }
            </MudCardContent>
            @if (EditMode)
            {
                <MudCardActions>
                    <MudStack
                        Row
                        AlignItems="AlignItems.Center"
                        Justify="Justify.SpaceEvenly">
                        @if (character.Id != "")
                        {
                            <MudButton
                                EndIcon="@Icons.Material.Filled.ContentCopy"
                                Color="@Color.Tertiary"
                                @onclick="cloneAsync">
                                Klonen
                            </MudButton>
                        }
                        <MudButton
                            EndIcon="@Icons.Material.Filled.Save"
                            Disabled="@(!hasChanges)"
                            Color="@Color.Primary"
                            @onclick="saveAsync">
                            Speichern
                        </MudButton>
                    </MudStack>
                </MudCardActions>
            }
        </MudCard>
    </CascadingValue>
}

@code {

    [Parameter]
    [EditorRequired]
    public required ICharacterHandle CharacterHandle { get; set; }
    
    [Parameter]
    [EditorRequired]
    public required CharacterPermissions Permissions { get; set; }

    [CascadingParameter]
    public required ICharacterCommandRouter OuterCommandRouter { get; set; }

    ICharacterHandle? lastHandle;

    Character character => CharacterHandle.Character;

    [Parameter]
    [EditorRequired]
    public required bool EditMode { get; set; }

    string newName = string.Empty;
    int newLpBaseCapacity;
    int newFoBaseCapacity;
    bool newIsOpponent;
    MudColor? newColor;
    bool newHasCustomColor;

    bool dummyAvatarPreviewSelected = false;

    IImmutableDictionary<string, ActionShorthand> newShorthands = ImmutableDictionary<string, ActionShorthand>.Empty;

    protected override void OnParametersSet()
    {
        clearHandleCallbacks();

        base.OnParametersSet();
        newName = character.Name;
        newLpBaseCapacity = character.Lp.BaseCapacity;
        newFoBaseCapacity = character.Fo.BaseCapacity;
        newColor = character.CustomColor is not null ? new MudColor(character.CustomColor) : "#000000";
        newHasCustomColor = character.CustomColor is not null;
        newIsOpponent = character.IsOpponent;
        newShorthands = character.ActionShorthands;
        lastHandle = CharacterHandle;
        CharacterHandle.CharacterUpdated += handleCharacterUpdated;
    }

    private bool hasChanges =>
        character.Id == ""
            || newName != character.Name
            || newLpBaseCapacity != character.Lp.BaseCapacity
            || newFoBaseCapacity != character.Fo.BaseCapacity
            || newIsOpponent != character.IsOpponent
            || (newHasCustomColor && newColor?.ToString(MudColorOutputFormats.Hex) != character.CustomColor)
            || (!newHasCustomColor && character.CustomColor is not null)
            || !newShorthands.SequenceEqual(character.ActionShorthands);

    public void Dispose()
    {
        clearHandleCallbacks();
    }

    void clearHandleCallbacks()
    {
        if (lastHandle is { } prevHandle)
        {
            prevHandle.CharacterUpdated -= handleCharacterUpdated;
        }

        if (CharacterHandle is { } handle)
        {
            handle.CharacterUpdated -= handleCharacterUpdated;
        }
    }

    void handleCharacterUpdated(object? sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    [SuppressMessage("ReSharper", "WithExpressionModifiesAllMembers")]
    public async Task ApplyAsync(ICharacterCommand command)
    {
        command = command switch {
            ApplyPoints applyPoints => applyPoints with{ CharacterId = character.Id},
            EditCharacter editCharacter => editCharacter with { CharacterId = character.Id},
            Domain.Commands.StopChanneling releaseChanneling => releaseChanneling with { CharacterId = character.Id},
            Domain.Commands.ShortRest shortRest => shortRest with { CharacterId = character.Id},
            DeleteCharacter deleteCharacter => deleteCharacter with { CharacterId = character.Id},
            CloneCharacter cloneCharacter => cloneCharacter with { CharacterId = character.Id},
            _ => throw new ArgumentOutOfRangeException(nameof(command))
            };
        await OuterCommandRouter.ApplyAsync(command);
    }

    async Task saveAsync()
    {
        await ApplyAsync(new EditCharacter(
            null!,
            newName,
            newLpBaseCapacity,
            newFoBaseCapacity, 
            newHasCustomColor && newColor != null 
                ? newColor.ToString(MudColorOutputFormats.Hex) 
                : null, newShorthands, newIsOpponent
            ));
    }

    async Task cloneAsync()
    {
        await ApplyAsync(new CloneCharacter(null!));
    }

    async Task deleteAsync()
    {
        await ApplyAsync(new DeleteCharacter(null!));
    }

}