@using Splitracker.Domain
<MudDialog>
    <TitleContent>
        <MudText
            Typo="Typo.h5">
            @typeObject
            @if (Shorthand is { Name: { } name })
            {
                <text>@name ändern</text>
            }
            else
            {
                <text> hinzufügen</text>
            }
        </MudText>
    </TitleContent>
    <DialogContent>
        <div
            class="editor">
            @{
                var row = 1;
            }
            @* input data *@
            <div
                style="@($"grid-column: 1/3; grid-row: {row}")"
                class="dense-control">
                <MudTextField
                    @bind-Value="selectedName"
                    Immediate="@true"
                    Label="@($"Name des {typeObject}s")"
                    Required="@true"
                    RequiredError="@($"{typeObject} braucht einen Namen")"
                    HelperText="so kurz wie möglich!"/>
            </div>

            <div
                style="@($"grid-column: 3; grid-row: {row}")"
                class="dense-control">
                <MudNumericField
                    T="int"
                    @bind-Value="selectedTicks"
                    Label="@(Type == ActionShorthandType.Spell ? "Ticks" : "WGS")"
                    Min="1"
                    Max="99"/>
            </div>

            @if (Type is ActionShorthandType.Ranged or ActionShorthandType.Spell)
            {
                row += 1;
                <div
                    style="@($"grid-column: 1/{(Type == ActionShorthandType.Spell ? 3 : 4)}; grid-row: {row}")"
                    class="dense-control">
                    <MudTextField
                        @bind-Value="selectedDescription"
                        Immediate="@true"
                        Label="Beschreibung"/>
                </div>
            }

            @if (Type == ActionShorthandType.Spell)
            {
                <div
                    style="@($"grid-column: 3; grid-row: {row}")"
                    class="dense-control">
                    <MudTextField
                        T="string"
                        @bind-Text="selectedCost"
                        Label="FO Kosten"
                        HelperText="z.B. K3V1"
                        autocomplete="off"
                        Mask="@costExpressionMask"
                        ErrorText="Kombination von K, E, V und Zahlen"/>
                </div>
            }
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton
            OnClick="@cancel">
            Abbrechen
        </MudButton>
        <MudButton
            OnClick="@submit"
            Disabled="@(!isValid)"
            Icon="@Icons.Material.Filled.Add"
            Color="Color.Success">
            @(Shorthand != null ? "Änderungen speichern" : $"{typeObject} erstellen")
        </MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    public required MudDialogInstance MudDialog { get; set; }

    [Parameter]
    [EditorRequired]
    public required ActionShorthandType Type { get; set; }

    [Parameter]
    public ActionShorthand? Shorthand { get; set; }

    readonly IMask costExpressionMask = new RegexMask("^" + PointsVec.IncrementalExpressionPattern + "$");

    int selectedTicks = 7;
    string? selectedName;
    string? selectedDescription;
    string? selectedCost;
    bool isValid => !string.IsNullOrWhiteSpace(selectedName) && selectedTicks > 0;

    string typeObject => Type switch {
        ActionShorthandType.Melee => "Nahkampfangriff",
        ActionShorthandType.Ranged => "Fernkampfangriff",
        ActionShorthandType.Spell => "Zauber",
        _ => throw new ArgumentOutOfRangeException(nameof(Type)),
    };

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (Shorthand is { } shorthand)
        {
            selectedName = shorthand.Name;
            selectedDescription = shorthand.Description;
            selectedTicks = shorthand.Ticks;
            selectedCost = shorthand.CostExpression;
        }
    }

    void cancel()
    {
        MudDialog.Cancel();
    }

    void submit()
    {
        if (!isValid)
        {
            return;
        }
        
        MudDialog.Close(DialogResult.Ok(new ActionShorthand(
            Shorthand?.Id ?? IdGenerator.RandomId(),
            selectedName!,
            !string.IsNullOrWhiteSpace(selectedDescription) ? selectedDescription : null,
            selectedTicks,
            Type,
            !string.IsNullOrWhiteSpace(selectedCost) ? PointsVec.From(selectedCost, PointType.K).ToString() : null)
        ));
    }

}