@page "/g/{JoinCode}"
@using Splitracker.Domain
@using Splitracker.Web.Shared.Groups
@inject IGroupRepository groupRepository

@inject NavigationManager nav

<PageTitle>Gruppe beitreten | Splitracker</PageTitle>

@if (!loaded)
{
    <MudProgressCircular
        Indeterminate="true"/>
}
else if (group == null)
{
    <MudText>Sieht einsam aus hier. 😶 Bist du sicher, dass du den Gruppeneinladungslink richtig kopiert hast?</MudText>
}
else
{
    <MudStack>
        <MudText
            Typo="Typo.h6">
            Schön, dass du hier bist!
        </MudText>
        <MudText
            Typo="Typo.h3">
            @group.Name
        </MudText>
        <MudText>Mit welchem Charakter möchtest du der Gruppe "@group.Name" beitreten?</MudText>
        <JoinWithCharacter
            Group="group"
            OnJoined="() => nav.NavigateTo(group.Url)"/>
    </MudStack>
}

@code {

    [Parameter]
    public required string JoinCode { get; set; }

    [CascadingParameter]
    public required Task<AuthenticationState> AuthenticationState { get; set; }

    Domain.Group? group;
    bool loaded;

    protected override async Task OnParametersSetAsync()
    {
        loaded = false;
        await base.OnParametersSetAsync();
        var auth = await AuthenticationState;
        switch (await groupRepository.GetByJoinCodeAsync(auth.User, JoinCode))
        {
            case JoinResult.GroupAlreadyJoined { Group: var theGroup}:
                nav.NavigateTo(theGroup.Url, replace: true);
                break;
            case JoinResult.GroupExists { Group: var theGroup}:
                group = theGroup;
                break;
            case JoinResult.GroupNotFound:
                group = null;
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
        loaded = true;
    }

}