@page "/Groups/{RawGroupId}"
@using Splitracker.Domain
@using Splitracker.Web.Shared.Groups
@using System.Collections.Immutable
@using Splitracker.Domain.Commands
@implements IAsyncDisposable
@inject IGroupRepository repository
@inject NavigationManager nav
@inject ClipboardService clipboard
@inject ISnackbar snackbar
@inject IUserRepository userRepository
@inject IDialogService dialog
@inject ITimelineRepository timelineRepository

<PageTitle>@(handle != null ? handle.Group.Name : "Gruppe") | Splitracker</PageTitle>

@if (!loaded)
{
    <MudProgressCircular
        Indeterminate="@true"/>
}
else if (handle == null)
{
    <MudStack>
        <MudAlert
            Severity="Severity.Error">
            Gruppe nicht gefunden
        </MudAlert>
        <MudText>
            Um einer Gruppe beizutreten, musst du einmalig den Beitrittslink der Gruppe aufrufen.
            Bitte wende dich an bestehende Gruppenmitglieder oder den*die Spielleiter*in.
        </MudText>
    </MudStack>
}
else
{
    <MudStack>
        <MudText
            Typo="Typo.h3">
            @handle.Group.Name
        </MudText>
        @if (handle.Group.JoinCode is {} joinCode)
        {
            var joinUrl = joinCodeUrl(joinCode);
            <MudAlert
                NoIcon="@true"
                Severity="Severity.Normal"
                Variant="Variant.Outlined">
                <p>
                    <strong>Beitrittslink:</strong>
                    <MudTooltip
                        Text="In die Zwischenablage kopieren">
                        <a
                            href="@(joinUrl)"
                            @onclick:preventDefault
                            @onclick="() => copyToClipboard(joinUrl)">
                            <code>@joinUrl</code>
                        </a>
                        <MudIconButton
                            Icon="@Icons.Material.Filled.ContentCopy"
                            OnClick="() => copyToClipboard(joinUrl)"/>
                    </MudTooltip>
                </p>
                <p>
                    Andere Spieler können der Gruppe mit einem Klick auf diesen Link beitreten.
                </p>
            </MudAlert>
        }
        <MudPaper
            Class="pa-4">
            <MudStack>
                @if (handle.Group.HasTimeline)
                {
                    <MudText
                        Typo="Typo.h4">
                        Tickleiste
                    </MudText>
                    <MudButton
                        EndIcon="@Icons.Material.Filled.ViewTimeline"
                        Size="Size.Large"
                        Variant="Variant.Filled"
                        Color="@Color.Primary"
                        Href="@($"{handle.Group.Url}/Ticks")">
                        Zur Tickleiste
                    </MudButton>
                    @if (role == GroupRole.GameMaster && !Flags.StageMode)
                    {
                        <MudButton
                            EndIcon="@Icons.Material.Filled.Clear"
                            Size="Size.Large"
                            Color="Color.Default"
                            Variant="Variant.Outlined"
                            OnClick="resetTimelineButtonClicked">
                            Zurücksetzen
                        </MudButton>
                    }
                    <MudDivider/>
                }
                else if (role == GroupRole.GameMaster)
                {
                    <MudText
                        Typo="Typo.h4">
                        Tickleiste (inaktiv)
                    </MudText>
                    <MudButton
                        EndIcon="@Icons.Material.Filled.ViewTimeline"
                        Size="Size.Large"
                        Variant="Variant.Filled"
                        Color="@Color.Success"
                        OnClick="activateTimelineButtonClicked">
                        Aktivieren!
                    </MudButton>
                    <MudDivider/>
                }
                <MudText
                    Typo="Typo.h4">
                    Charaktere
                </MudText>
                @foreach (var (character, permissions) in charactersWithPermissions)
                {
                    <MudStack
                        @key="@character.Id"
                        Class="pt-4 align-baseline"
                        Row="@true">
                        <CharacterAvatar
                            Character="@character"/>
                        <MudText
                            Class="flex-grow-1">
                            @character.Name
                        </MudText>
                        @if (permissions.HasFlag(CharacterPermissions.RemoveFromGroup))
                        {
                            <MudTooltip
                                Text="@($"Charakter \"{character.Name}\" aus der Gruppe entfernen")">
                                <MudIconButton
                                    Color="Color.Error"
                                    Icon="@Icons.Material.Filled.PersonRemove"
                                    OnClick="() => leaveGroupClicked(character)"/>
                            </MudTooltip>
                        }
                    </MudStack>
                }
            </MudStack>
        </MudPaper>
        @if (!Flags.StageMode)
        {
            <MudText>
                Möchtest du einen weiteren Charakter zur Gruppe hinzufügen?
            </MudText>
            <JoinWithCharacter
                Group="handle.Group"/>
        }
    </MudStack>
}

@code {

    [Parameter]
    [EditorRequired]
    public required string RawGroupId { get; set; }

    [CascadingParameter]
    public required Task<AuthenticationState> AuthenticationState { get; set; }

    [CascadingParameter]
    public required IPermissionService Permissions { get; set; }
    
    [CascadingParameter]
    public required FlagContext Flags { get; set; }

    IGroupHandle? handle;
    bool loaded;

    IImmutableList<(Character Character, CharacterPermissions Permissions)> charactersWithPermissions =
        ImmutableList<(Character Character, CharacterPermissions Permissions)>.Empty;
    
    GroupRole? role;

    protected override async Task OnParametersSetAsync()
    {
        if (handle != null)
        {
            await handle.DisposeAsync();
        }
        loaded = false;

        await base.OnParametersSetAsync();

        var auth = await AuthenticationState;
        var userId = await userRepository.GetUserIdAsync(auth.User);
        handle = await repository.OpenSingleAsync(auth.User, $"Groups/{RawGroupId}");
        if (handle != null)
        {
            handle.Updated += (_, _) => InvokeAsync(() =>
            {
                charactersWithPermissions = enrichedWithPermissions();
                StateHasChanged();
            });
            role = handle.Group.Members.TryGetValue(userId, out var membership) ? membership.Role : null;
        }
        loaded = true;
        charactersWithPermissions = enrichedWithPermissions();
    }

    IImmutableList<(Character Character, CharacterPermissions Permissions)> enrichedWithPermissions()
    {
        return handle != null ? handle.Group.Characters.Values
            .OrderBy(c => c.Name)
            .Select(c => (c, Permissions.InTheContextOf(c, handle.Group)))
            .Where(c => c.Item2.HasFlag(CharacterPermissions.ViewInfo))
            .ToImmutableArray() : ImmutableList<(Character Character, CharacterPermissions Permissions)>.Empty;
    }

    string joinCodeUrl(string joinCode)
    {
        return $"{nav.BaseUri}g/{joinCode}";
    }

    async Task copyToClipboard(string joinUrl)
    {
        await clipboard.WriteTextAsync(joinUrl);
        snackbar.Add("Link in die Zwischenablage kopiert!", configure: c =>
        {
            c.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
            c.SnackbarVariant = Variant.Outlined;
            c.VisibleStateDuration = 3000;
        });
    }

    async Task leaveGroupClicked(Character character)
    {
        if (handle == null)
        {
            return;
        }
        var auth = await AuthenticationState;
        await repository.LeaveGroupAsync(auth.User, handle.Group, character);
    }

    public async ValueTask DisposeAsync()
    {
        GC.SuppressFinalize(this);
        if (handle != null)
        {
            await handle.DisposeAsync();
        }
    }

    async Task resetTimelineButtonClicked()
    {
        if (handle != null && await dialog.ShowMessageBox("Tickleiste zurücksetzen?", 
            "Alle Charaktere der Gruppe werden in den Zustand \"Abwarten\" versetzt. " +
                "Effekte und Charaktere, die nicht zur Gruppe gehören, werden von der Tickleiste entfernt.", 
            yesText: "Kapiert, bitte zurücksetzen", cancelText: "Abbrechen", options: new() { CloseOnEscapeKey = true }) is true)
        {
            var auth = await AuthenticationState;
            await timelineRepository.ApplyAsync(auth.User, new TimelineCommand.ResetEntireTimeline(handle.Group.Id));
        }
    }

    async Task activateTimelineButtonClicked()
    {
        if (handle != null)
        {
            var auth = await AuthenticationState;
            await timelineRepository.ApplyAsync(auth.User, new TimelineCommand.ResetEntireTimeline(handle.Group.Id));
            nav.NavigateTo(nav.Uri + "/Ticks");
        }
    }

}