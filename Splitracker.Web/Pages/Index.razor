@page "/"
@using Splitracker.Domain
@implements IAsyncDisposable

@inject ICharacterRepository repository

<PageTitle>Splitracker</PageTitle>
<SectionContent
    Name="top">
    <MudPaper Elevation="1" Class="mx-6 pl-6">
        <MudSwitch
            T="bool"
            @bind-Checked="editMode">
            <MudIcon
                Icon="@Icons.Material.Filled.ModeEdit"
                Color="@(editMode ? Color.Tertiary : Color.Default)"/>
        </MudSwitch>
    </MudPaper>
</SectionContent>

<div
    class="d-flex flex-row flex-wrap gap-4">
    @if (handle != null)
    {
        @foreach (var characterHandle in handle.Characters)
        {
            <CharacterCard
                @key="characterHandle.Character.Id"
                Character="@characterHandle.Character"
                EditMode="@editMode"/>
        }
    }
    else
    {
        <CharacterCardSkeleton/>
    }
</div>

@code {

    [CascadingParameter]
    public required Task<AuthenticationState> AuthenticationState { get; set; }

    ICharacterRepositoryHandle? handle;

    private bool editMode;

    protected override async Task OnParametersSetAsync()
    {
        if (handle != null)
        {
            await handle.DisposeAsync();
        }
        handle = null;
        StateHasChanged();

        await base.OnInitializedAsync();
        var auth = await AuthenticationState;
        handle = await repository.OpenAsync(auth.User);
    }

    public async ValueTask DisposeAsync()
    {
        if (handle != null)
        {
            await handle.DisposeAsync();
        }
    }

}