@using Blazored.LocalStorage
@inject ILocalStorageService localStorage
@inject FlagContextHolder flags
@inject IJSRuntime js
@implements IDisposable

<CascadingAuthenticationState>
    <CascadingValue
        Value="@flags.Context">
        <CascadingPermissionService>

            <Router
                AppAssembly="@typeof(App).Assembly">
                <Found
                    Context="routeData">
                    <AuthorizeRouteView
                        RouteData="@routeData"
                        DefaultLayout="@typeof(MainLayout)"/>
                    <FocusOnNavigate
                        RouteData="@routeData"
                        Selector="h1"/>
                </Found>
                <NotFound>
                    <PageTitle>Nicht gefunden</PageTitle>
                    <LayoutView
                        Layout="@typeof(MainLayout)">
                        <MudAlert
                            Severity="Severity.Warning">
                            Hoppla, was du suchst gibt's irgendwie nicht ðŸ˜¶
                        </MudAlert>
                    </LayoutView>
                </NotFound>
            </Router>
        </CascadingPermissionService>
    </CascadingValue>
</CascadingAuthenticationState>

@code {

    protected override void OnInitialized()
    {
        flags.Changed += flagsChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }
        
        var newFlags = await localStorage.GetItemAsync<FlagContext>("flags") ?? flags.Context;
        if (newFlags.DarkMode == null)
        {
            var prefersDarkMode = await js.InvokeAsync<bool>("splitrackerClientPrefersDarkMode");
            newFlags = newFlags with { DarkMode = prefersDarkMode};
        }
        flags.Context = newFlags;
    }

    public void Dispose()
    {
        flags.Changed -= flagsChanged;
    }

    void flagsChanged(object? sender, EventArgs e)
    {
        localStorage.SetItemAsync("flags", flags.Context);
        StateHasChanged();
    }

}