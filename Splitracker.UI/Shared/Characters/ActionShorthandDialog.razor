@using Splitracker.Domain
<MudDialog>
    <TitleContent>
        <MudText
            Typo="Typo.h5">
            @typeObject
            @if (Shorthand is { Name: { } shorthandName })
            {
                <text>@shorthandName ändern</text>
            }
            else
            {
                <text> hinzufügen</text>
            }
        </MudText>
    </TitleContent>
    <DialogContent>
        <div
            class="dialog-editor">
            @{
                var row = 1;
            }
            @* input data *@
            <div
                style="@($"grid-column: 1/3; grid-row: {row}")"
                class="dense-control">
                <MudTextField
                    @bind-Value="name"
                    Immediate="@true"
                    Label="@($"Name des {typeObject}s")"
                    Required="@true"
                    RequiredError="@($"{typeObject} braucht einen Namen")"
                    HelperText="so kurz wie möglich!"/>
            </div>

            <div
                style="@($"grid-column: 3; grid-row: {row++}")"
                class="dense-control">
                <MudNumericField
                    T="int"
                    @bind-Value="selectedTicks"
                    Label="@(Type == ActionShorthandType.Spell ? "Ticks" : "WGS")"
                    Min="1"
                    Max="99"/>
            </div>

            @if (Type is ActionShorthandType.Ranged or ActionShorthandType.Spell)
            {
                <div
                    style="@($"grid-column: 1/{(Type == ActionShorthandType.Spell ? 3 : 4)}; grid-row: {row}")"
                    class="dense-control">
                    <MudTextField
                        @bind-Value="description"
                        Immediate="@true"
                        Label="Beschreibung"/>
                </div>
            }

            @if (Type == ActionShorthandType.Spell)
            {
                <div
                    style="@($"grid-column: 3; grid-row: {row}")"
                    class="dense-control">
                    <MudTextField
                        T="string"
                        @bind-Text="cost"
                        Label="FO Kosten"
                        HelperText="z.B. K3V1"
                        autocomplete="off"
                        Mask="@costExpressionMask"
                        ErrorText="Kombination von K, E, V und Zahlen"/>
                </div>
            }

            @if (Type is ActionShorthandType.Ranged or ActionShorthandType.Spell)
            {
                row++;
            }

            <div
                class="full mt-3"
                style="@($"grid-row: {row++}")">
                <MudText
                    Typo="Typo.subtitle1">
                    Wurf
                </MudText>
            </div>

            <div
                class="default-control"
                style="@($"grid-row: {row++}")">
                <MudNumericField
                    T="int"
                    @bind-Value="bonus"
                    Label="Fertigkeitsbonus"
                    autocomplete="off"/>
            </div>

            <div
                class="full mt-3"
                style="@($"grid-row: {row++}")">
                <MudText
                    Typo="Typo.subtitle1">
                    Schaden
                </MudText>
            </div>

            @* Damage expr *@
            <div
                class="dense-control"
                style="@($"grid-column: 1/3; grid-row: {row}")">
                <MudTextField
                    T="string"
                    @bind-Text="damageExpression"
                    Label="Schadenswurf"
                    HelperText="z.B. 2W10 + 3"
                    autocomplete="off"
                    Mask="@diceExpressionMask"/>
            </div>

            @* Damage clamp minimum *@
            <div
                class="dense-control"
                style="@($"grid-column: 3; grid-row: {row++}")">
                <MudTooltip
                    Text="Jeder Schadenswürfel zählt mindestens so viel.">
                    <MudNumericField
                        T="int"
                        @bind-Value="damageClampMin"
                        Label="Scharf"
                        autocomplete="off"/>
                </MudTooltip>
            </div>

            @* Damage bonus dice *@
            <div
                style="@($"grid-column: 1/3; grid-row: {row}")">
                <MudTooltip
                    Text="Wirf so viele Bonuswürfel um schlechte Schadenswürfel zu ersetzen">
                    <MudNumericField
                        T="int"
                        @bind-Value="damageBonusDice"
                        Label="Exakt"
                        autocomplete="off"/>
                </MudTooltip>
            </div>

            @* Critical (per critical roll damage bonus) *@
            <div
                style="@($"grid-column: 3; grid-row: {row++}")">
                <MudTooltip
                    Text="Für jeden Würfel, der die höchste Augenzahl zeigt, füge so viel Schaden zusätzlich zu.">
                    <MudNumericField
                        T="int"
                        @bind-Value="perCriticalDamageBonus"
                        Label="Kritisch"
                        autocomplete="off"/>
                </MudTooltip>
            </div>

            @* Per Success bonus *@
            <div
                style="@($"grid-column: 1/3; grid-row: {row++}")">
                <MudTooltip
                    Text="Jeder Erfolg, der für Schaden verwendet wird, verursacht 2 statt 1 zusätzlichen Schaden.">
                    <MudCheckBox T="int" @bind-Checked="perSuccessDamageBonus">Wuchtig</MudCheckBox>
                </MudTooltip>
            </div>

            @{
                _ = row;
            }
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton
            OnClick="@cancel">
            Abbrechen
        </MudButton>
        <MudButton
            OnClick="@submit"
            Disabled="@(!isValid)"
            Icon="@Icons.Material.Filled.Add"
            Color="Color.Success">
            @(Shorthand != null ? "Änderungen speichern" : $"{typeObject} erstellen")
        </MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    public required MudDialogInstance MudDialog { get; set; }

    [Parameter]
    [EditorRequired]
    public required ActionShorthandType Type { get; set; }

    [Parameter]
    public ActionShorthand? Shorthand { get; set; }

    readonly IMask costExpressionMask = new RegexMask("^" + PointsVec.IncrementalExpressionPattern + "$");
    readonly IMask diceExpressionMask = new RegexMask("^" + DiceExpression.IncrementalExpressionPattern + "$");

    int selectedTicks = 7;
    string? name;
    string? description;
    string? cost;
    int bonus;
    bool damageExpressionValid = true;

    string? damageExpression
    {
        get => _damageExpression;
        set
        {
            _damageExpression = value;
            if (string.IsNullOrWhiteSpace(value))
            {
                _damage = null;
                damageExpressionValid = true;
            }
            else if (DiceExpression.Parse(value) is { } expr)
            {
                _damage = expr;
                damageExpressionValid = true;
            }
            else
            {
                _damage = null;
                damageExpressionValid = false;
            }
        }
    }

    DiceExpression? damage
    {
        get => _damage;
        set
        {
            _damage = value;
            _damageExpression = value?.ToString();
            damageExpressionValid = true;
        }
    }

    int perCriticalDamageBonus;
    int damageBonusDice;
    int damageClampMin;
    int perSuccessDamageBonus;
    string? _damageExpression;
    DiceExpression? _damage;

    bool isValid => !string.IsNullOrWhiteSpace(name)
        && selectedTicks > 0
        && perCriticalDamageBonus >= 0
        && damageBonusDice >= 0
        && damageClampMin >= 0
        && perSuccessDamageBonus >= 0
        && damageExpressionValid;

    string typeObject => Type switch {
        ActionShorthandType.Melee => "Nahkampfangriff",
        ActionShorthandType.Ranged => "Fernkampfangriff",
        ActionShorthandType.Spell => "Zauber",
        _ => throw new ArgumentOutOfRangeException(nameof(Type)),
    };

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (Shorthand is { } shorthand)
        {
            name = shorthand.Name;
            description = shorthand.Description;
            selectedTicks = shorthand.Ticks;
            cost = shorthand.CostExpression;
            bonus = shorthand.Bonus;
            if (shorthand.Damage is { } shorthandDamage)
            {
                damage = shorthandDamage;
                perCriticalDamageBonus = shorthandDamage.PerCriticalBonus;
                damageBonusDice = shorthandDamage.NumberOfBonusDice;
                damageClampMin = shorthandDamage.ClampMin;
            }

            perSuccessDamageBonus = shorthand.PerSuccessDamageBonus;
        }
    }

    void cancel()
    {
        MudDialog.Cancel();
    }

    void submit()
    {
        if (!isValid)
        {
            return;
        }

        MudDialog.Close(DialogResult.Ok(new ActionShorthand(
                Shorthand?.Id ?? IdGenerator.RandomId(),
                name!,
                !string.IsNullOrWhiteSpace(description) ? description : null,
                selectedTicks,
                Type,
                !string.IsNullOrWhiteSpace(cost) ? PointsVec.From(cost, PointType.K).ToString() : null,
                bonus,
                damage != null
                    ? damage with {
                        ClampMin = damageClampMin,
                        NumberOfBonusDice = damageBonusDice,
                        PerCriticalBonus = perCriticalDamageBonus,
                    }
                    : null,
                perSuccessDamageBonus
            )
        ));
    }

}