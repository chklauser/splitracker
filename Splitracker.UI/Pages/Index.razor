@page "/"
@using Splitracker.Domain
@using Splitracker.Domain.Commands
@using Splitracker.UI.Shared.Characters
@using System.Collections.Immutable
@implements IAsyncDisposable
@implements ICharacterCommandRouter

@inject ICharacterRepository repository
@inject ITagRepository tagRepository
@inject NavigationManager nav

<PageTitle>Charaktere | Splitracker</PageTitle>

<MudBreadcrumbs
    Items="breadcrumbs"/>
@if (tagHandle is { Tags.Count: > 0 } || filterTags.Count > 0)
{
    <TagFilter
        PossibleTags="@(tagHandle?.Tags ?? [])"
        @bind-SelectedTagIds="filterTags"/>
}
<div
    class="d-flex flex-row flex-wrap gap-4">
    @if (handle is { } repositoryHandle)
    {
        var (matching, rest) = repositoryHandle.Characters
            .OrderByDescending(c => c.Character.InsertedAt)
            .Partition(c => c.Character.TagIds.Overlaps(filterTags));
        <CascadingValue
            TValue="ICharacterCommandRouter"
            IsFixed="true"
            Value="@this">
            @if (matching.Count > 0)
            {
                @foreach (var characterHandle in matching)
                {
                    <CharacterCard
                        @key="characterHandle.Character.Id"
                        CharacterHandle="@characterHandle"
                        Permissions="@characterPermissions[characterHandle.Character.Id]"
                        ShowActions="@true"/>
                }
            }
            else if(filterTags.Count > 0)
            {
                <MudText Typo="Typo.body1">Gibt anscheinend keine Charaktere, die diese Tags aufweisen.</MudText>
            }
            
            @if (filterTags.Count > 0 && rest.Count > 0)
            {
                <MudStack
                    Row
                    Style="width: 100%"
                    Justify="Justify.SpaceEvenly"
                    AlignItems="AlignItems.Center">
                    <MudDivider Style="width: 30%"/>
                    <MudText
                        Typo="Typo.h5"
                        Class="flex-none">
                        Deine anderen Charaktere
                    </MudText>
                    <MudDivider Style="width: 30%"/>
                </MudStack>
            }
            
            @foreach (var characterHandle in rest)
            {
                <CharacterCard
                    @key="characterHandle.Character.Id"
                    CharacterHandle="@characterHandle"
                    Permissions="@characterPermissions[characterHandle.Character.Id]"
                    ShowActions="@true"/>
            }
        </CascadingValue>
    }
    else
    {
        <CharacterCardSkeleton/>
    }

    @if (handle is { Characters.Count: 0 })
    {
        <MudText>
            Hier werden deine Charaktere angezeigt. Wie es scheint, hast du aber im Moment noch keine Charaktere.
            Klick auf den schwebenden runden Knopf unten rechts, um einen neuen Charakter anzulegen.
        </MudText>
    }
</div>

<MudFab
    Class="fixed z-100"
    Style="right: 1.5rem; bottom: 1.5rem;"
    DisableRipple="@true"
    StartIcon="@Icons.Material.Filled.Add"
    Color="@Color.Primary"
    @onclick="gotoNew"/>

@code {
    static List<BreadcrumbItem> breadcrumbs => [new("Charaktere", "/", icon: Icons.Material.Filled.EmojiPeople!)];

    [CascadingParameter]
    public required Task<AuthenticationState> AuthenticationState { get; set; }

    [CascadingParameter]
    public required IPermissionService Permissions { get; set; }
    
    [CascadingParameter]
    public required SessionContext Session { get; set; }

    ICharacterRepositoryHandle? handle;
    ITagRepositoryHandle? tagHandle;
    IImmutableDictionary<string, CharacterPermissions> characterPermissions = ImmutableDictionary<string, CharacterPermissions>.Empty;

    IImmutableList<string> filterTags
    {
        get => Session.FilterTags;
        set => Session.FilterTags = value;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (handle != null)
        {
            await handle.DisposeAsync();
        }

        handle = null;
        if (tagHandle != null)
        {
            await tagHandle.DisposeAsync();
        }

        tagHandle = null;
        StateHasChanged();

        await base.OnParametersSetAsync();
        var auth = await AuthenticationState;
        handle = await repository.OpenAsync(auth.User);
        handle.CharacterAdded += (_, _) => InvokeAsync(onCharacterListUpdated);
        handle.CharacterDeleted += (_, _) => InvokeAsync(onCharacterListUpdated);
        refreshCharacterPermissions();

        tagHandle = await tagRepository.OpenAsync(auth.User);
        tagHandle.Added += (_, _) => InvokeAsync(StateHasChanged);
        tagHandle.Deleted += (_, _) => InvokeAsync(StateHasChanged);
    }

    void refreshCharacterPermissions()
    {
        characterPermissions = handle?.Characters.ToImmutableDictionary(
            c => c.Character.Id,
            c => Permissions.OnTheCharacterScreen(c.Character)
        ) ?? ImmutableDictionary<string, CharacterPermissions>.Empty;
    }

    void onCharacterListUpdated()
    {
        refreshCharacterPermissions();
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (handle != null)
        {
            await handle.DisposeAsync();
        }

        if (tagHandle != null)
        {
            await tagHandle.DisposeAsync();
        }
    }

    public async Task ApplyAsync(ICharacterCommand command)
    {
        var state = await AuthenticationState;
        await repository.ApplyAsync(state.User, command);
    }

    void gotoNew()
    {
        nav.NavigateTo("/Characters/New");
    }

}