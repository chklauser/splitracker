@page "/Characters/{Id}/Edit"

@using Splitracker.Domain
@using Splitracker.Domain.Commands
@using System.Diagnostics.CodeAnalysis
@using Microsoft.Extensions.Logging
@using Splitracker.UI.Shared.Characters

@implements IDisposable
@implements ICharacterCommandRouter
@inject ICharacterRepository repository
@inject NavigationManager nav;
@inject ILogger<CharacterEdit> log;

<CascadingValue
    TValue="ICharacterCommandRouter"
    IsFixed="@true"
    Value="@this">
    @if (handle is { Character: { } character })
    {
        <CharacterEditForm
            Character="@character"
            Template="@templateHandle?.Character"
            Permissions="@Permissions.OnTheCharacterScreen(character)"/>
    }
    else
    {
        <MudSkeleton
            SkeletonType="SkeletonType.Rectangle"/>
    }
</CascadingValue>

@code {

    [Parameter]
    [EditorRequired]
    public required string Id { get; set; }

    [CascadingParameter]
    public required Task<AuthenticationState> AuthenticationState { get; set; }

    [CascadingParameter]
    public required IPermissionService Permissions { get; set; }

    ICharacterHandle? handle;
    ICharacterHandle? templateHandle;

    protected override async Task OnParametersSetAsync()
    {
        if (handle != null)
        {
            handle.Dispose();
            handle = null;
        }

        if (templateHandle != null)
        {
            templateHandle.Dispose();
            templateHandle = null;
        }

        await base.OnParametersSetAsync();
        var state = await AuthenticationState;
        var fullCharacterId = await repository.FullCharacterIdFromImplicitAsync(state.User, Id);
        if (fullCharacterId is null)
        {
            log.Log(LogLevel.Warning, "Cannot resolve implicit character ID {Id} for user.", Id);
            nav.NavigateTo("/");
            return;
        }

        handle = await repository.OpenSingleAsync(state.User, fullCharacterId);
        if (handle is null)
        {
            log.Log(LogLevel.Warning, "Cannot open character {Id}.", fullCharacterId);
            nav.NavigateTo("/");
            return;
        }

        if (handle.Character.TemplateId is { } templateId)
        {
            templateHandle = await repository.OpenSingleAsync(state.User, templateId);
            if (templateHandle == null)
            {
                log.Log(LogLevel.Warning, "Cannot open template {Id}.", templateId);
                nav.NavigateTo("/");
                return;
            }
            templateHandle.Updated += handleUpdated;
        }

        handle.Updated += handleUpdated;
    }

    [SuppressMessage("ReSharper", "WithExpressionModifiesAllMembers")]
    public async Task ApplyAsync(ICharacterCommand command)
    {
        var state = await AuthenticationState;
        var fullCharacterId = await repository.FullCharacterIdFromImplicitAsync(state.User, Id);
        if (fullCharacterId is null)
        {
            nav.NavigateTo("/");
            return;
        }

        command = command switch {
            EditCharacter editCharacter => editCharacter with { CharacterId = fullCharacterId },
            EditCharacterInstance editCharacter => editCharacter with { CharacterId = fullCharacterId },
            DeleteCharacter deleteCharacter => deleteCharacter with { CharacterId = fullCharacterId },
            CloneCharacter cloneCharacter => cloneCharacter with { CharacterId = fullCharacterId },
            CreateCharacterInstance createCharacterInstance => createCharacterInstance,
            UnlinkFromTemplate unlink => unlink with { CharacterId = fullCharacterId },
            _ => throw new ArgumentOutOfRangeException(nameof(command)),
        };

        if (command is DeleteCharacter && handle != null)
        {
            handle.Dispose();
            handle = null;
        }

        await repository.ApplyAsync(state.User, command);
        string nextUrl;
        if (command is CloneCharacter)
        {
            // Switch to whatever the newest character is. This is not guaranteed to be correct, but should
            // work in most cases.
            await using var allHandle = await repository.OpenAsync(state.User);
            await Task.Delay(TimeSpan.FromMilliseconds(500));
            nextUrl = allHandle.Characters.MaxBy(c => c.Character.InsertedAt) is { Character.ImplicitId: { } createdId }
                ? $"/Characters/{createdId}/Edit"
                : "/";
        }
        else if (command is UnlinkFromTemplate && handle != null)
        {
            nextUrl = $"/Characters/{handle.Character.ImplicitId}/Edit";
        }
        else
        {
            nextUrl = "/";
        }

        nav.NavigateTo(nextUrl);
    }

    public void Dispose()
    {
        if (handle != null)
        {
            handle.Dispose();
            handle = null;
        }

        if (templateHandle != null)
        {
            templateHandle.Dispose();
            templateHandle = null;
        }
    }

    void handleUpdated(object? sender, EventArgs e)
    {
        InvokeAsync(() =>
        {
            if (handle is { Character.TemplateId: null } && templateHandle != null)
            {
                templateHandle.Dispose();
                templateHandle = null;
            }
            StateHasChanged();
        });
    }

}