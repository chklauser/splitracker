@page "/Roll"
@using Splitracker.Domain.Rolls
@using Splitracker.UI.Shared.Rolls

<PageTitle>Würfeln | Splitracker</PageTitle>

<MudStack Justify="Justify.Center" AlignItems="AlignItems.Baseline" Class="mt-4">
    <MudChipSet
        SelectedValues="@(new object[] { rollType })"
        Filter="true"
        Mandatory="true"
        MultiSelection="false"
        SelectedChipChanged="@(ch => rollType = (RollType)ch.Value)">
        <MudChip
            Value="RollType.Safe"
            Color="Color.Success">
            Sicherheitswurf
        </MudChip>
        <MudChip
            Value="RollType.Standard"
            Color="Color.Primary">
            Standardwurf
        </MudChip>
        <MudChip
            Value="RollType.Risky"
            Color="Color.Error">
            Risikowurf
        </MudChip>
    </MudChipSet>
    <MudButton Color="Color.Primary" OnClick="rollDice">Würfeln</MudButton>
    <MudStack
        Row="true">
        @if (rollType == RollType.Standard)
        {
            <DieDisplay
                Roll="@rolls[0]"/>
            <div class="mud-typography mud-typography-h4">&nbsp;+&nbsp;</div>
            <DieDisplay
                Roll="@rolls[1]"/>
        }
        else if (rollType == RollType.Safe)
        {
            var sorted = rolls.Take(2).Order().ToArray();
            <DieDisplay
                Roll="@sorted[0]"/>
            <div class="mud-typography mud-typography-h4">&nbsp;oder&nbsp;</div>
            <DieDisplay
                Roll="@sorted[1]"/>
        }
        else if (rollType == RollType.Risky)
        {
            var sorted = rolls.Count(r => r <= 2) >= 2 ? rolls.OrderDescending().ToArray() : rolls.Order().ToArray();
            <div class="mud-typography mud-typography-h4">(</div>
            <DieDisplay
                Roll="@sorted[0]"/>
            <div class="mud-typography mud-typography-h4">,&nbsp;</div>
            <DieDisplay
                Roll="@sorted[1]"/>
            <div class="mud-typography mud-typography-h4">)&nbsp;</div>
            <DieDisplay
                Roll="@sorted[2]"/>
            <div class="mud-typography mud-typography-h4">&nbsp;+&nbsp;</div>
            <DieDisplay
                Roll="@sorted[3]"/>
        }
        <div class="mud-typography mud-typography-h4">&nbsp;=&nbsp;</div>
        <MudText
            Typo="Typo.h4">
            @dieResult
        </MudText>
    </MudStack>
    <MudSlider
        T="int"
        @bind-Value="bonus"
        Max="40"
        Min="-20"
        TickMarks="true"
        ValueLabel="true"
        Size="Size.Large"
    />
    <MudStack Row="true">
        <MudText
            Typo="Typo.h4">
            @dieResult
        </MudText>
        <div class="mud-typography mud-typography-h4">&nbsp;+&nbsp;</div>
        <MudText
            Typo="Typo.h4"
            Color="Color.Primary">
            @bonus
        </MudText>
        <div class="mud-typography mud-typography-h4">&nbsp;=&nbsp;</div>
        <MudText
            Typo="Typo.h4">
            @(result)
        </MudText>
    </MudStack>
    <MudSlider
        T="int"
        @bind-Value="target"
        Max="50"
        Min="5"
        TickMarks="true"
        ValueLabel="true"
        Size="Size.Large"
    />
    <MudStack Row="true">
        <MudText
            Typo="Typo.h4">
            @(result)
        </MudText>
        <div class="mud-typography mud-typography-h4">&nbsp;@(result >= target ? "≥" : "<")&nbsp;</div>
        <MudText
            Typo="Typo.h4"
            Color="Color.Primary">
            @target
        </MudText>
        <div class="mud-typography mud-typography-h4">&nbsp;(</div>
        <MudText
            Typo="Typo.h4">
            @successDegrees EG
        </MudText>
        <div class="mud-typography mud-typography-h4">)</div>
    </MudStack>
</MudStack>

@code {
    readonly Random random = new();
    RollType rollType = RollType.Standard;

    readonly int[] rolls = new int[4];
    int bonus;
    int dieResult;
    int target = 15;
    
    int result => bonus + dieResult;
    int successDegrees => 
        Math.Clamp((result - target) / 3, -5, 5)
        + (dieResult <= 3 ? -3 : 0)
        + (dieResult >= 19 ? +3 : 0);

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        rollDice();
    }

    void rollDice()
    {
        for (var i = 0; i < rolls.Length; i++)
        {
            rolls[i] = random.Next(10) + 1;
        }

        dieResult = rollType switch {
            RollType.Standard => rolls.Take(2).Sum(),
            RollType.Risky => (rolls.Count(r => r <= 2) >= 2 ? rolls.Order() : rolls.OrderDescending()).ToArray().Take(2).Sum(),
            RollType.Safe => rolls.Take(2).Max(),
            _ => throw new ArgumentOutOfRangeException(),
        };
        
    }

}